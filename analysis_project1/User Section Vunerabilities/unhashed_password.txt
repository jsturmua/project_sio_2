Vulnerability: Plaintext Storage of a Password (CWE-256)

Explanation:
In the file registration.php the user has the ability to create a new account. The problem is that in the following code stores the password in the database in plaintext. So if a hacker gets access to the database in anyway itÂ´s possible to read the password.
In the following code you can see that the passwords gets written directly in the database:

    // Bind variables to the prepared statement as parameters
    mysqli_stmt_bind_param($stmt, "sss", $param_username, $param_password, $param_role);
    
    // Set parameters
    $param_username = $username;
    $param_password = $password;
    $param_role = 'user';
    
    // Attempt to execute the prepared statement
    if(mysqli_stmt_execute($stmt)){
        // Redirect to login page
        header("location: login.php");
    }

Solution: 
To prevent having the passwords in plaintext there is the possibility to hash passwords. The corrected code looks like this (app_sec/php/registration.php):
    // Bind variables to the prepared statement as parameters
            mysqli_stmt_bind_param($stmt, "sss", $param_username, $param_password, $param_role);
            
            // Set parameters
            $param_username = $username;
            $param_password = password_hash($password, PASSWORD_DEFAULT); // Creates a password hash
            $param_role = 'user';

The same has to be done with the password reset file. See "app_sec/php/reset_password.php".

Due to this change also the login (app_sec/php/login.php) has to be changed. To see if the entered password is correct the password_verify function has to be used. The corrected login section looks like this:
        if ($result && $row = mysqli_fetch_array($result)) {
            // Verify the password using password_verify
            $hashedPassword = $row['password'];
            if (password_verify($mypassword, $hashedPassword)) {
                $_SESSION['login_user'] = $myusername;
                $_SESSION['login_role'] = $row['role'];
                header("location: welcome.php");
                exit; 
            }
        } else...

The password has to be hashed because of these reasons:
    Protect User Passwords: Storing passwords in plaintext is a security risk. If an attacker gains access to the database where passwords are stored, they would have access to all user passwords. Hashing the passwords helps protect user data in the event of a security breach.

    Protection from Insider Threats: Even if you trust your own staff who have access to the database, it's a good practice not to have direct access to plaintext passwords. Hashed passwords provide an extra layer of protection against insider threats.
