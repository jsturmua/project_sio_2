Exploration: Basic SQL injection at login pages.

Explanation: 
    At the login.php page there are the fields username and password. Due to a vulnerability in the source code the password field can be skipped or even the username and the password can be skipped. The source code looks like this (app/php/login.php):

            $myusername = $_POST['username'];
            $mypassword = $_POST['password'];

            // WARNING: This is an example of a vulnerable SQL query
            $sql = "SELECT * FROM users WHERE username = '$myusername' AND password = '$mypassword'";
            $result = mysqli_query($db, $sql);

    The input of the user gets not verified. So it is very easy to skip the query.
        1. The query can be skipped by the input "'' OR 1=1 --" . This leads to this code:
            SELECT * FROM users WHERE username = '' OR 1=1 --' AND password = ''
        This makes it unnecessary to know the username and the password and the attacker gets forwareded to the logged in page.

        2. If the username is known it is also possible to only skip the password with this input:
            "<username>' --"
            SQL Query: 'SELECT * FROM users WHERE username = '<username>'' --AND password = '''

        So it is possible to login in only with a username and without a password.

    The general problem is that it is possible to login without valid user credentials or also only with a username (and without password).

Solution:
    The solution to solve this problem is to verify the input of the user and furthermore use prepared statements for the sql query.
    To verify the user input:
        $myusername = mysqli_real_escape_string($db, $_POST['username']);
        $mypassword = mysqli_real_escape_string($db, $_POST['password']);
    Add the prepared statement:
        $sql = "SELECT * FROM users WHERE username = ? AND password = ?";
        $stmt = mysqli_prepare($db, $sql);
    Afterwards the parameters get binded to the prepared statement and finally executet:
        mysqli_stmt_bind_param($stmt, "ss", $myusername, $mypassword);
        mysqli_stmt_execute($stmt);

Through this implementaiton the SQL injection is not possible anymore.